---- SILOSTORE BY FIFTI






---- 1. utility functions
-------------------------

function findPeripheral(kind)
  out = {}
  for _,i in pairs(peripheral.getNames()) do
    if string.match(i, kind) then table.insert(out, i) end
  end
  return out
end

function arrayLength(T)
  local n = 0
  for a,b in pairs(T) do
    n = n + 1
  end
  return n
end

function sleepTwo()
  sleep(2)
  return
end

function printCentered(sText)
  local w, h = term.getSize()
  local x, y = term.getCursorPos()
  x = math.max(math.floor((w / 2) - (#sText / 2) + 1), 0)
  term.setCursorPos(x, y)
  print(sText)
end

chestItems = {}
function internalUpdateItems(i)
  local toReturn = {}
  local chest = peripheral.wrap(i)
  local items = chest.list()
  --local items = peripheral.call(i, "list")
  for iter,j in pairs(items) do
    toReturn[iter] = j
    toReturn[iter]["displayName"] = chest.getItemDetail(iter)["displayName"]
   -- toReturn[iter]["displayName"] = peripheral.call(i,"getItemDetail",iter)["displayName"]
  end
  return toReturn
end

function updateItems()
  t = os.clock()
  allChestItems = {}
  if chests == nil then
    chests = findPeripheral("chest")
  end
  loopFunctions = {}
  for _, i in pairs(chests) do
    table.insert(loopFunctions, function() allChestItems[i] = internalUpdateItems(i) end)
  end
  parallel.waitForAll(table.unpack(loopFunctions))
  chestItems = allChestItems
end

function infoBox(color, title, message, nohold)
  term.setBackgroundColor(colors.white)
  term.clear()
  w,h = term.getSize()
  paintutils.drawFilledBox(w/4,h/4,w - w/4,h - h/5,color)
  term.setCursorPos(1,h/3-1)  
  term.setTextColor(colors.white)
  printCentered(title)
  local y = h/3 + 1
  local x = 0
  local line = ""
  for i=1,#message,1 do
    line = line .. message:sub(i,i)
    x = x + 1
    
    if (x >= 22) or (message:sub(i+1,i+1) ~= " " and message:sub(i,i) == " " and x == 21) then
      
      if message:sub(i+1,i+1) ~= " " and message:sub(i+1,i+1) ~= "" and message:sub(i,i) ~= " " then
        line = line .. "-"
      end
      
      term.setCursorPos(1,y)
      term.setTextColor(colors.white)
      printCentered(line)
      y = y + 1
      x = 0
      line = ""
    end
  end
  term.setCursorPos(1,y)
  term.setTextColor(colors.white)
  printCentered(line)
  
  if not nohold then
    term.setCursorPos(1,h - h/5-1)
    printCentered("[ OK ]")
    x,y = term.getCursorPos()
    while true do
      _, _, cx, cy = os.pullEvent("mouse_click")
      
      if cx >= w / 2 - 3 and cy == y - 1 and cx <= w / 2 + 3 then
        break
      end
    end
  end
  return true
end








---- 2. deposit handling
------------------------

function handleDeposit()
  infoBox(colors.green, "Deposit", "Place the items in the dropper, then click 'OK' below.")
  infoBox(colors.green, "Deposit", "Place the items in the dropper, then click 'OK' below.",true)
  items = dropper.list()
  lenitems = arrayLength(items)
  avspac = 0

  if lenitems == 0 then
    infoBox(colors.red, "Deposit", "You never put anything in the dropper.")
    return
  end

  for _, i in pairs(chestItems) do
    if arrayLength(i) < 54 then
      avspac = avspac + 54 - arrayLength(i)
    end
  end
  if avspac < lenitems then 
    infoBox(colors.red,"Deposit", "Not enough space!")
    return
  end
  currentSlot = 1


  for i,j in pairs(chestItems) do
    list = j
    lenchestitems = arrayLength(j)
    while lenchestitems < 54 do
      dropper.pushItems(i, currentSlot)
      lenchestitems = lenchestitems + 1
      while currentSlot < 9 and dropper.getItemDetail(currentSlot) == nil do
        currentSlot = currentSlot + 1
      end
      if currentSlot >= 9 and dropper.getItemDetail(currentSlot) == nil then break end
    end
    if currentSlot >= 9 and dropper.getItemDetail(currentSlot) == nil then break end
  end
  parallel.waitForAll(function () infoBox(colors.green, "Deposit", "Deposit complete.") end, updateItems)
  return
end


















----3. withdrawal handling
--------------------------

local function drawSearchGUI(bgc, itemcache, searchterm)
  
  if searchterm == nil then searchterm = "" end
  allitems = itemcache
  if itemcache == nil then
    allitems = {}


    for i,items in pairs(chestItems) do
      for iter,j in pairs(items) do
        name = j["displayName"]
        if allitems[name] == nil then 
          allitems[name] = j["count"]
        else
          allitems[name] = allitems[name] + j["count"]
        end
      end
    end
  end
  ait = {}
  
  for i,j in pairs(allitems) do
    if searchterm == nil or string.match(string.lower(i), string.lower(searchterm)) then
      table.insert(ait, {
        name = i,
        count = j
      })
    end
  end
  table.sort(ait, function (k1, k2) return k1.count > k2.count end)
  term.setBackgroundColor(bgc)
  term.setTextColor(colors.white)

  term.clear()
  term.setBackgroundColor(colors.white)
  term.setCursorPos(1,1)
  term.clearLine(1)
  term.setTextColor(colors.black)
  term.setCursorPos(1,1)
  write("<- Back")
  printCentered("- SiloStore 3 -")
  term.setBackgroundColor(bgc)
  term.setTextColor(colors.white)
  term.setCursorPos(1,5)
  print("QTY    NAME")
  w,h = term.getSize()
  
  y = 6
  options = {}
  for i,j in pairs(ait) do
    if y >= h then break end
    if searchterm == nil or string.match(string.lower(j.name), string.lower(searchterm)) then
      print(j.count .. string.sub("          ", 10 - (7 - #tostring(j.count)) + 1) .. j.name)
      options[y] = j
      y = y + 1
    end
  end
  
  if arrayLength(ait) > h - 6 then
    term.setCursorPos(1,h)
    write("... and " .. (arrayLength(ait) - (h - 6)) .. " more")
  end
  
  term.setCursorPos(1,3)
  write("Search for: " .. searchterm)
  term.setCursorBlink(true)
  
  if arrayLength(options) == 0 then
    term.setCursorPos(1,7)
    printCentered("- No results -")
    term.setCursorBlink(false)
  end
  while true do
    event, key, a1, a2 = os.pullEvent()
    if event == "char" then
      searchterm = searchterm .. key
      break
    elseif event == "key" then
      if key == keys.backspace then
        if #searchterm > 0 then
          searchterm = string.sub(searchterm, 1, #searchterm - 1)
          break
        end
      end
    elseif event == "mouse_click" then
      x,y = a1,a2
      if y == 1 and x < 9 then
        return
      end
      if y >= 6 and y < h then
        itemname = options[y].name
        count = options[y].count
        term.setBackgroundColor(bgc)
        term.clear()
        term.setBackgroundColor(colors.white)
        term.setCursorPos(1,1)
        term.clearLine(1)
        term.setTextColor(colors.black)
        term.setCursorPos(1,1)
        write("<- Back")
        printCentered("- SiloStore 3 -")
        term.setBackgroundColor(bgc)
        term.setTextColor(colors.white)
        term.setCursorPos(1,3)
        print("Withdrawing " .. itemname)
        print("There are " .. count .. " in storage")
        amount = ""
        done = 0
        while done == 0 do
          term.clearLine()
          term.setCursorPos(1,6)
          write("Enter amount to withdraw: " .. amount)
          term.setCursorBlink(true)
          while true do
            event, key, a1, a2 = os.pullEvent()
            if event == "char" then
              if tonumber(key) ~= nil then
                amount = amount .. key
                break
              end
            elseif event == "key" then
              if key == keys.backspace then
                if #amount > 0 then
                  amount = string.sub(amount, 1, #amount - 1)
                  break
                end
              end
              
              if key == keys.enter then
                if amount ~= "" then
                  done = 1
                  break
                end
              end
            elseif event == "mouse_click" then
              x,y = a1,a2
              if y == 1 and x < 9 then
                done = 2
                break
              end
            end
          end
        end
        if done == 1 then
          amount = tonumber(amount)
          term.setCursorBlink(false)
          term.setCursorPos(1,8)
          
          if amount <= 64 * 9 then
            write("Loading..")
          else
            write("Loading, max withdrawal is " .. 64 * 9)
            amount = 64*9
          end
          remaining = amount
          
          for i,items in pairs(chestItems) do
            for iter,j in pairs(items) do
              if remaining > 0 then
                if j["displayName"] == itemname then
                  peripheral.call(i, "pushItems", output, iter, remaining)
                  remaining = remaining - j["count"]
                end
              end
            end
          end
          term.setCursorPos(1,8)
          term.clearLine()
          term.setCursorPos(1,8)
          if remaining > 0 then
            print("Withdrew " .. (amount - remaining) .. " items. Could not withdraw any more.")
          else
            print("Withdrew " .. amount .. " items.")
          end
          parallel.waitForAny(sleepTwo, updateItems)
          return
        elseif done == 2 then
          break
        end
      end
    end
  end
  drawSearchGUI(bgc, allitems, searchterm)
end



















----4. main loop
----------------

term.setBackgroundColor(colors.black)
term.clear()
term.setCursorPos(1,10)
printCentered("Loading")
updateItems()
while true do
  output = findPeripheral("dropper")[1]
  dropper = peripheral.wrap(output)

  chests = findPeripheral("chest")

  if not output or not chests[1] then
    print(output)
    print(chests[1])  
    error("Check that a dropper and chest are connected.")
  end
  term.setBackgroundColor(colors.white)
  term.setTextColor(colors.white)

  term.clear()
  w,h = term.getSize()
  paintutils.drawFilledBox(w / 8      ,   h/5 + 1,  w/2 - 3,  h/5 + 5,  colors.green)
  term.setCursorPos(w/8 + 2, h/5 + 3)
  print("Deposit Items")

  paintutils.drawFilledBox(w/2 + 3,   h/5 + 1,  w - w/8 + 1,  h/5 + 5,  colors.blue)
  term.setCursorPos(w / 2 + w/8 - 1, h/5 + 3)
  print("Withdraw Items")
  
  totitems = 0
  usedstacks = 0
  totalstacks = 0
  for i, items in pairs(chestItems) do
    totalstacks = totalstacks + 54
    for iter,j in pairs(items) do
      totitems = totitems + j["count"]
      usedstacks = usedstacks + 1
    end
  end
  
  percent = math.floor(usedstacks / totalstacks * 100)
  term.setTextColor(colors.lightGray)
  term.setBackgroundColor(colors.white)
  stra = totitems .. " items  "
  strb = "  " .. percent .. "% full"
  term.setCursorPos(w/2 - (#stra),h-2)
  print(stra .. "\7" .. strb)
  term.setCursorBlink(false)
  os.startTimer(1)
  while true do
    event, arg1, arg2, arg3 = os.pullEvent()
    
    if event == "timer" then
      os.startTimer(1)
      if arrayLength(dropper.list()) > 0 then
        term.setTextColor(colors.red)
        term.setCursorPos(1,h-1)
        printCentered("There are items in the output dropper.")
      else
        term.setCursorPos(1,h-1)
        term.clearLine()
      end
      
    end
    
    if event == "mouse_click" then
      x,y = arg2, arg3
      
      if x >= w / 8 and x<= w / 2 - w / 8 + 1 then
        if y >= h/5 + 1 and y <= h/5 + 5 then
          handleDeposit()
          break
        end
      end
      
      if x >= w / 2 + w / 8 - 1 and x<= w - w / 8 + 1 then
        if y >= h/5 + 1 and y <= h/5 + 5 then
          infoBox(colors.blue, "Withdrawal", "Loading, please wait", true)
          drawSearchGUI(colors.blue)
          break
        end
      end
    end
  end
end
